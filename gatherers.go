// Code generated by go-bindata.
// sources:
// gatherers/ab/dbi
// gatherers/ab/gen
// gatherers/ab/hii
// gatherers/ab/psi
// gatherers/ab/wbd
// gatherers/an/bac
// gatherers/an/crd
// gatherers/an/doi
// gatherers/an/esi
// gatherers/an/fic
// gatherers/an/mef
// gatherers/an/moi
// gatherers/an/myi
// gatherers/an/nus
// gatherers/an/poi
// gatherers/an/sii
// gatherers/an/trn
// gatherers/an/vrc
// gatherers/an/zsc
// gatherers/common
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _gatherersAbDbi = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\xcc\x2b\x2e\x49\xcc\xc9\x49\x4d\x51\x50\x4a\x29\xca\x2f\x48\x4a\x4d\x2c\x52\x28\x2e\xce\x50\x48\xce\xc9\x4c\xcd\x2b\x51\x80\x4b\x2b\x29\xc0\xa4\xb9\x00\x01\x00\x00\xff\xff\xf3\x97\x69\xa5\x33\x00\x00\x00")

func gatherersAbDbiBytes() ([]byte, error) {
	return bindataRead(
		_gatherersAbDbi,
		"gatherers/ab/dbi",
	)
}

func gatherersAbDbi() (*asset, error) {
	bytes, err := gatherersAbDbiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gatherers/ab/dbi", size: 51, mode: os.FileMode(436), modTime: time.Unix(1440551321, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _gatherersAbGen = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x54\x5b\x6f\xe2\x38\x14\x7e\xe7\x57\x1c\x45\x1d\x25\xd1\xa6\x21\xf4\x36\x52\xab\x91\xb6\x82\xce\xc2\x4e\xb5\x44\x25\x2d\x0f\xc3\x88\x71\x12\x27\xf1\x92\xd8\x5e\xdb\x19\xc1\xac\xe6\xbf\xef\x49\x80\xb4\xd0\xf6\x71\x25\x2e\x3e\xdf\x77\x2e\x3e\x37\x67\x35\x4f\x0c\x13\x1c\x32\x51\xf3\xd4\x71\xe1\xdf\x1e\xc0\xf4\x31\xfa\xf4\x3d\x57\x54\xc2\xa9\xd2\x65\x02\xd6\xc9\xc0\x82\x7e\x21\x2a\xfa\x1d\x59\x51\x1b\x59\x9b\x25\x51\x8a\x6c\x90\x3a\xb3\xf0\x07\x2d\xac\x1e\x72\x74\xcd\x0c\x04\xbd\x5f\xbd\x5e\xeb\x0f\x6c\x4d\xd1\x6b\xa2\xc8\xcf\x8d\x07\x81\x07\x27\x9a\xfd\xa4\x1e\x68\x91\xac\x48\x9a\xaa\x25\xe3\xce\x89\x14\xca\x20\xc3\x1a\xc0\x75\x6f\x6c\xb0\xd3\x54\x68\x7b\xef\x61\x34\x12\x33\xc6\x73\x30\x05\x85\x49\x78\xcc\x46\xd3\xe9\x3d\x8c\x46\xd3\x19\x8c\x26\x77\xaf\x4c\xa9\x5e\xa5\x75\xac\x0d\x95\xc7\xd4\x5c\x31\x63\x28\x87\x78\x03\x33\x61\x52\xa4\xa5\xd0\x9a\xc5\x25\x85\x46\x0f\x9c\x06\x75\xed\x2e\x8f\x70\x63\x0a\xac\xd2\x53\x5d\x72\xaa\x48\xcc\x4a\x66\xd0\x32\x21\x1c\xc5\xc6\x78\x4b\xff\x38\xa0\xf5\x8e\xde\xfb\x68\xd4\x35\x16\x5a\xc1\xe7\x28\x04\x4d\xd5\x0f\xaa\x34\x1a\x67\x46\xb6\xba\xcf\xd1\xc6\x8f\xf7\x5f\x60\xf4\x07\x44\x84\x43\x22\x78\x8e\x4a\xba\xd6\x92\x25\x4c\xd4\x1a\x75\x15\x93\xa6\x73\x1b\x46\x17\x1f\xe1\xd6\x18\x92\xac\x60\x66\x88\x32\x34\x7d\x5b\x7f\x6f\xf0\x99\x24\x34\x16\x62\x05\x43\x85\x36\x54\xc1\x13\xde\x03\x67\xa0\xb9\xca\x9e\x22\x71\xad\x69\x17\xa2\x83\x63\x55\x1b\x8a\x19\x24\x6d\xd6\xef\x68\x6f\xea\xb4\x20\x7e\x5e\x73\x5d\x62\xe3\xa8\xfa\x3d\xaf\x08\x2b\xfd\x44\x54\x2f\xcb\x7c\x68\x0c\x4e\x6b\xe5\x76\x4e\x0a\x63\xe4\x75\xbf\x4f\x6a\x23\x4a\xb6\xa2\x59\xec\x0b\x95\xf7\xb3\x4b\xbf\x30\x55\x79\x10\x7b\xa7\xd1\x59\x22\x50\x08\x75\x0d\x5f\x26\x11\x8c\xef\x1e\xa6\xaf\x7b\xbb\x67\x9e\xa3\x55\x8c\x53\x9c\xd2\xcc\x2c\xb7\x6d\xb1\x5f\x40\xbb\x4e\xbd\xd4\xc5\xb4\x96\x52\x89\xf5\xc6\xde\x8b\xb0\x15\x0f\xc6\x3e\x2b\x85\x48\x3d\x90\x58\x64\xc7\x22\x27\xb2\x99\x7d\xcb\xb3\x5a\xd8\x72\xdb\x7d\x68\xb8\xe5\xe1\x36\x1c\xad\xc3\xaf\xe3\xc9\x35\x62\x85\x73\xfb\x09\x14\xe1\xa9\xa8\xfc\xa4\x10\x2c\xa1\xce\xd7\x85\xed\xff\x75\x17\xc1\xf0\xfe\x61\x61\x7b\xb0\xb0\x67\x4f\x83\xed\x21\x22\x98\xb8\x81\x70\xb8\x15\xe7\x8c\x5f\x5d\xdc\xc0\xe4\xf6\xea\xe2\x00\x58\x77\xf2\x74\xde\x1c\xbf\xb9\xf0\x1b\x4a\x37\xf8\x3d\xbe\xc1\xff\x98\x9c\xa2\xff\xd4\x54\x1b\x4c\xcf\x0a\xa7\xb3\x08\x3e\xe8\xfe\xba\x2a\x95\x4c\x7c\x59\x48\x18\x47\x51\xd8\x1f\xf8\xc1\x42\x2d\xf8\x58\x68\x73\x8d\x7c\x73\x7e\xc4\x0e\x9d\xde\xe6\x94\x23\x32\xe1\x86\x2a\x4e\x4a\x98\x0b\x95\x4a\x45\xb5\x86\x87\x70\xd8\x6c\x11\xb6\xd3\x6c\xa7\xfc\x20\xa4\xb3\x2b\x64\xf3\xc7\xb8\x71\xae\x3c\x38\x3f\xc3\x04\x8e\xe0\x41\x80\x19\x9d\x05\x41\xf0\x9a\x42\x62\xf0\x16\x7e\x79\x7e\xe9\xc1\xe5\xf9\xc7\x37\x9c\x61\x8c\x2b\xd7\x6d\xdf\x02\x06\x8c\x37\x7c\x4e\x5b\x38\x70\xe1\x1b\x56\xfe\x2b\xd8\xbb\xad\xec\x7f\x48\xfd\xf6\x03\x33\x92\x11\xc5\x50\x3e\x4e\xa1\x22\xba\x79\x3f\x4e\x89\x94\x7e\x61\x77\x32\x64\xac\x7c\x5e\x8b\x3f\x85\xa8\x4a\xf2\xee\x0b\xf6\xf7\x96\x7e\xe7\x05\xfb\x2f\x00\x00\xff\xff\xd2\xef\xe2\xf3\x27\x06\x00\x00")

func gatherersAbGenBytes() ([]byte, error) {
	return bindataRead(
		_gatherersAbGen,
		"gatherers/ab/gen",
	)
}

func gatherersAbGen() (*asset, error) {
	bytes, err := gatherersAbGenBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gatherers/ab/gen", size: 1575, mode: os.FileMode(436), modTime: time.Unix(1440552868, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _gatherersAbHii = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\xcc\x2b\x2e\x49\xcc\xc9\x49\x4d\x51\x50\xca\x28\xc8\xcc\x4b\x37\x56\x80\x8b\x28\x29\x40\x44\xb8\x00\x01\x00\x00\xff\xff\x16\xa6\xa6\xc9\x24\x00\x00\x00")

func gatherersAbHiiBytes() ([]byte, error) {
	return bindataRead(
		_gatherersAbHii,
		"gatherers/ab/hii",
	)
}

func gatherersAbHii() (*asset, error) {
	bytes, err := gatherersAbHiiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gatherers/ab/hii", size: 36, mode: os.FileMode(436), modTime: time.Unix(1440551321, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _gatherersAbPsi = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\xcc\x2b\x2e\x49\xcc\xc9\x49\x4d\x51\x50\xcf\xcb\x4d\x2c\x50\x28\xc8\x2f\x2a\x29\x4e\x4e\xcc\xcb\x4b\x2d\x52\x80\xcb\xa9\x43\x24\xd5\xb9\x90\x55\x27\x27\x96\xe0\x56\x0d\x94\x44\x51\x5d\x90\x07\x52\x86\x53\x3d\x44\x1a\x45\x47\x76\x5e\x7e\x72\x36\x50\x19\x2e\x2d\x50\x79\x54\x37\x25\x16\xe3\x71\x13\x50\x52\x9d\x0b\x10\x00\x00\xff\xff\x30\xf1\xb0\xe7\xf0\x00\x00\x00")

func gatherersAbPsiBytes() ([]byte, error) {
	return bindataRead(
		_gatherersAbPsi,
		"gatherers/ab/psi",
	)
}

func gatherersAbPsi() (*asset, error) {
	bytes, err := gatherersAbPsiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gatherers/ab/psi", size: 240, mode: os.FileMode(436), modTime: time.Unix(1440551321, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _gatherersAbWbd = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x8c\x41\x0e\xc2\x30\x0c\x04\xef\xbc\xc2\xf2\x07\xfc\x24\x44\xa8\x53\x2c\x15\xb6\xb2\x1b\x25\xcf\x27\x22\xe4\x80\xc4\xa1\x97\x9d\xbd\xcc\x2c\xe6\x57\x6d\x16\x47\x10\x0b\xf6\x43\x56\x60\xdd\x54\xee\x0f\xc7\x73\x82\x89\xc7\xa1\xaa\x89\x92\xa3\x86\x3a\x65\x94\xd7\xc2\x97\x9f\x42\x09\x97\xcd\x92\x64\x73\xcd\x68\x93\x3d\xf0\x7d\xa7\x0b\xd8\xd5\x6f\x63\xbb\xfd\xe1\x3f\xf7\x1d\x00\x00\xff\xff\x86\xed\xbd\x13\xc0\x00\x00\x00")

func gatherersAbWbdBytes() ([]byte, error) {
	return bindataRead(
		_gatherersAbWbd,
		"gatherers/ab/wbd",
	)
}

func gatherersAbWbd() (*asset, error) {
	bytes, err := gatherersAbWbdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gatherers/ab/wbd", size: 192, mode: os.FileMode(436), modTime: time.Unix(1440551321, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _gatherersAnBac = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x2b\xcd\x4d\x4a\x2d\x8a\xcf\x4f\x8b\xcf\xc9\xcc\x4b\x2d\x56\x50\xd2\x4b\x4a\x2c\xce\x28\x4a\x56\xe2\x02\x04\x00\x00\xff\xff\x42\xbd\x37\xd7\x1a\x00\x00\x00")

func gatherersAnBacBytes() ([]byte, error) {
	return bindataRead(
		_gatherersAnBac,
		"gatherers/an/bac",
	)
}

func gatherersAnBac() (*asset, error) {
	bytes, err := gatherersAnBacBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gatherers/an/bac", size: 26, mode: os.FileMode(436), modTime: time.Unix(1440549266, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _gatherersAnCrd = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\x0e\xf2\xf7\x8b\xf7\x0f\x0d\xb1\x55\xd1\x48\x2e\xca\xcf\x2b\x49\x4c\x52\xd0\xcd\x51\xa8\x51\x48\x2f\x4a\x2d\x50\xd0\x2d\x53\x50\x52\x56\x02\xf2\x8a\x53\x53\x14\xd4\xf5\xe3\x62\x8a\xb5\x54\xf4\x53\xd4\x35\xb9\xf2\x4b\x4b\x0a\x4a\x4b\xe2\x13\x8b\x8a\x12\x2b\x15\x94\x40\x1a\x15\x52\xf3\x4a\x8a\x32\x53\x8b\x15\x52\x52\x4b\x52\x93\x4b\x52\x53\x94\x14\x94\x54\xaa\x61\xa6\xeb\xeb\xab\x6b\xa9\xd7\x2a\x71\x01\x02\x00\x00\xff\xff\x9b\xe0\x2a\xd9\x6e\x00\x00\x00")

func gatherersAnCrdBytes() ([]byte, error) {
	return bindataRead(
		_gatherersAnCrd,
		"gatherers/an/crd",
	)
}

func gatherersAnCrd() (*asset, error) {
	bytes, err := gatherersAnCrdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gatherers/an/crd", size: 110, mode: os.FileMode(436), modTime: time.Unix(1440549266, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _gatherersAnDoi = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\xcc\x2b\x2e\x49\xcc\xc9\x49\x4d\x51\x50\x4a\xc9\x4f\xce\x4e\x2d\x52\x80\x8b\x28\x29\x40\x44\xb8\x00\x01\x00\x00\xff\xff\x0f\x6e\x3b\x32\x24\x00\x00\x00")

func gatherersAnDoiBytes() ([]byte, error) {
	return bindataRead(
		_gatherersAnDoi,
		"gatherers/an/doi",
	)
}

func gatherersAnDoi() (*asset, error) {
	bytes, err := gatherersAnDoiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gatherers/an/doi", size: 36, mode: os.FileMode(436), modTime: time.Unix(1440549266, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _gatherersAnEsi = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xc9\x2c\x8a\x4f\xad\xc8\x2c\x2e\x29\x56\x50\xd2\x2f\x2d\x2e\xd2\x2f\xce\x48\x2c\x4a\xd5\x4f\xcd\x49\x2c\x2e\xc9\x4c\x2e\x4e\x4d\x2c\x4a\xce\x50\x52\x50\x42\xe1\x2b\xa4\xe5\x97\xe6\xa5\x28\x71\x01\x02\x00\x00\xff\xff\xcd\x10\xaf\x69\x3c\x00\x00\x00")

func gatherersAnEsiBytes() ([]byte, error) {
	return bindataRead(
		_gatherersAnEsi,
		"gatherers/an/esi",
	)
}

func gatherersAnEsi() (*asset, error) {
	bytes, err := gatherersAnEsiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gatherers/an/esi", size: 60, mode: os.FileMode(436), modTime: time.Unix(1440549266, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _gatherersAnFic = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x2f\x2d\x29\x28\x2d\x89\x2f\xcd\xcb\x49\x2d\x2e\x8e\x4f\x4b\xcc\x29\xae\x54\x50\x4a\xcb\x2c\xce\x50\xc8\xc9\xcc\x4b\x55\x48\xce\x2f\xcd\x2b\x51\x52\x50\xf1\x0b\xf5\x75\x72\x0d\x52\x50\xd1\xc8\x2b\xcd\x4d\x4a\x2d\x8a\xcf\x4f\x8b\x07\xc9\x17\x2b\xd4\xe9\xeb\x25\xe7\xe7\xa5\x65\xa6\xeb\x83\x34\xe9\x43\xd8\x7a\x20\xb6\x26\x17\x20\x00\x00\xff\xff\xf4\x17\xf6\x40\x5c\x00\x00\x00")

func gatherersAnFicBytes() ([]byte, error) {
	return bindataRead(
		_gatherersAnFic,
		"gatherers/an/fic",
	)
}

func gatherersAnFic() (*asset, error) {
	bytes, err := gatherersAnFicBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gatherers/an/fic", size: 92, mode: os.FileMode(436), modTime: time.Unix(1440549266, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _gatherersAnMef = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x0c\xcb\x4d\x0a\xc2\x30\x10\x05\xe0\xbd\xa7\x78\x14\x31\xad\x50\x5d\xe8\x41\xdc\x8b\x48\x30\xaf\x3a\x60\x7e\x98\x4c\x05\x21\x87\x6f\x36\xdf\xee\xcb\xab\x95\xd5\x9e\x5e\xd5\xff\xe1\x22\x83\x78\x2c\xf2\xe5\x58\x27\x04\x1a\x5f\xc6\xe0\xb0\x1f\x17\x49\x01\xe7\x4f\x8e\xc4\x9c\x7c\x77\x38\x9e\x62\xb9\x5f\xda\xf5\x31\xa0\x1d\xf0\x56\x16\xcc\x3f\xb8\x1b\x35\x4a\xad\x92\x53\xff\x49\xfa\x9e\x76\x5b\x00\x00\x00\xff\xff\x54\xb9\xe1\x87\x65\x00\x00\x00")

func gatherersAnMefBytes() ([]byte, error) {
	return bindataRead(
		_gatherersAnMef,
		"gatherers/an/mef",
	)
}

func gatherersAnMef() (*asset, error) {
	bytes, err := gatherersAnMefBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gatherers/an/mef", size: 101, mode: os.FileMode(436), modTime: time.Unix(1440549266, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _gatherersAnMoi = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\xcc\x2b\x2e\x49\xcc\xc9\x49\x4d\x51\x50\xca\xcd\xcf\x4b\xcf\x4f\x49\x52\x80\x0b\x29\x29\x40\x84\xb8\x00\x01\x00\x00\xff\xff\x94\xde\xa3\x94\x25\x00\x00\x00")

func gatherersAnMoiBytes() ([]byte, error) {
	return bindataRead(
		_gatherersAnMoi,
		"gatherers/an/moi",
	)
}

func gatherersAnMoi() (*asset, error) {
	bytes, err := gatherersAnMoiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gatherers/an/moi", size: 37, mode: os.FileMode(436), modTime: time.Unix(1440549266, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _gatherersAnMyi = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\xcc\x2b\x2e\x49\xcc\xc9\x49\x4d\x51\x50\xca\xad\x2c\x2e\xcc\x51\x80\x0b\x28\x29\x80\x05\xb8\x00\x01\x00\x00\xff\xff\xf3\xbc\xfd\xf3\x22\x00\x00\x00")

func gatherersAnMyiBytes() ([]byte, error) {
	return bindataRead(
		_gatherersAnMyi,
		"gatherers/an/myi",
	)
}

func gatherersAnMyi() (*asset, error) {
	bytes, err := gatherersAnMyiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gatherers/an/myi", size: 34, mode: os.FileMode(436), modTime: time.Unix(1440549266, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _gatherersAnNus = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x34\x8e\xcd\x4a\x86\x40\x18\x85\xd7\xf3\x5e\xc5\xe1\x63\x16\x4a\x88\x75\x01\x6e\xfa\x59\x08\x65\x60\xba\x12\x11\xd3\x77\x72\x60\x9a\x91\xf9\x29\x82\x2e\x3e\x33\xda\x9c\xc5\xe1\x3c\x0f\xe7\xb1\x7e\xe9\xa6\xfb\xba\xad\x64\x66\x02\xca\xcd\xbd\x33\xbe\xf1\xe6\x79\x47\xf1\x81\xf4\x9a\x6c\x4c\x39\xd1\xdd\x73\xdf\x74\xd5\x35\x29\xe7\xb1\x6a\x0f\x6d\x21\xff\x51\x5a\x1d\x09\xad\x30\x0c\x28\x8e\x3a\x3b\x61\xf9\xbb\x2a\x39\x2e\xe5\x3e\x87\xf0\xb9\xe6\x18\x47\x12\x71\x63\x4b\x42\x18\x8e\xf8\x33\x9e\x79\x75\x43\x42\xe9\x43\x63\x99\x5c\x8a\x7b\x8a\x53\xb2\x86\x43\x98\xd4\x6c\xc2\x17\x2e\x29\xb0\xc7\xe2\x8e\x2f\x17\xc8\xa6\x7f\xba\x7d\x68\x21\x4f\x94\x7e\x02\x00\x00\xff\xff\x6a\x5b\x02\x53\xc0\x00\x00\x00")

func gatherersAnNusBytes() ([]byte, error) {
	return bindataRead(
		_gatherersAnNus,
		"gatherers/an/nus",
	)
}

func gatherersAnNus() (*asset, error) {
	bytes, err := gatherersAnNusBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gatherers/an/nus", size: 192, mode: os.FileMode(436), modTime: time.Unix(1440549266, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _gatherersAnPoi = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\xcc\x2b\x2e\x49\xcc\xc9\x49\x4d\x51\x50\x2a\xc8\x2f\x2e\x49\x2f\x4a\x2d\x2e\xcc\x51\x80\x8b\x2a\x29\x14\x00\xf9\x5c\x80\x00\x00\x00\xff\xff\x22\xbd\xc0\xb3\x26\x00\x00\x00")

func gatherersAnPoiBytes() ([]byte, error) {
	return bindataRead(
		_gatherersAnPoi,
		"gatherers/an/poi",
	)
}

func gatherersAnPoi() (*asset, error) {
	bytes, err := gatherersAnPoiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gatherers/an/poi", size: 38, mode: os.FileMode(436), modTime: time.Unix(1440549266, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _gatherersAnSii = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\xcc\x2b\x2e\x49\xcc\xc9\x49\x4d\x51\x50\x2a\x2e\xcc\xc9\x2c\x49\x55\x80\x8b\x28\x29\x40\x44\xb8\x00\x01\x00\x00\xff\xff\xf6\xf9\x50\x9f\x24\x00\x00\x00")

func gatherersAnSiiBytes() ([]byte, error) {
	return bindataRead(
		_gatherersAnSii,
		"gatherers/an/sii",
	)
}

func gatherersAnSii() (*asset, error) {
	bytes, err := gatherersAnSiiBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gatherers/an/sii", size: 36, mode: os.FileMode(436), modTime: time.Unix(1440549266, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _gatherersAnTrn = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2c\xcb\x41\x0a\xc2\x40\x0c\x85\xe1\xbd\xa7\x78\x0c\x62\x5b\xa1\x7a\x15\x6f\x20\x83\x79\xd5\x80\x4d\x4a\x26\x15\x04\x0f\x6f\x17\xdd\xfc\xab\xff\xf3\x35\x97\x35\xef\x35\xa2\x7e\xd1\xa5\x47\xd0\x12\x93\xbe\xd9\xb7\x01\xc2\xe4\x23\x29\x1d\x8e\xfd\xa4\x26\xb8\xbe\x7c\x26\x46\xab\x5b\xcb\xf9\xb2\xff\x05\xbf\x13\x9e\xc1\x05\xe3\x07\xe5\xc6\x98\xb5\x35\x75\xdb\xbc\x29\xa5\x0c\x87\x7f\x00\x00\x00\xff\xff\x2e\x82\xae\x48\x67\x00\x00\x00")

func gatherersAnTrnBytes() ([]byte, error) {
	return bindataRead(
		_gatherersAnTrn,
		"gatherers/an/trn",
	)
}

func gatherersAnTrn() (*asset, error) {
	bytes, err := gatherersAnTrnBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gatherers/an/trn", size: 103, mode: os.FileMode(436), modTime: time.Unix(1440549266, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _gatherersAnVrc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x2b\xcd\x4d\x4a\x2d\x8a\xcf\x4f\x8b\xcf\xc9\xcc\x4b\x2d\x56\x50\xd2\x2b\xcb\xcc\x2d\x4a\x56\xe2\x02\x04\x00\x00\xff\xff\x9c\x67\x80\x6b\x19\x00\x00\x00")

func gatherersAnVrcBytes() ([]byte, error) {
	return bindataRead(
		_gatherersAnVrc,
		"gatherers/an/vrc",
	)
}

func gatherersAnVrc() (*asset, error) {
	bytes, err := gatherersAnVrcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gatherers/an/vrc", size: 25, mode: os.FileMode(436), modTime: time.Unix(1440549266, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _gatherersAnZsc = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x2b\xcd\x4d\x4a\x2d\x8a\xcf\x4f\x8b\xcf\xc9\xcc\x4b\x2d\x56\x50\xd2\xab\x2a\xce\x28\x4a\x56\xe2\x02\x04\x00\x00\xff\xff\x65\xa3\x8d\xc6\x19\x00\x00\x00")

func gatherersAnZscBytes() ([]byte, error) {
	return bindataRead(
		_gatherersAnZsc,
		"gatherers/an/zsc",
	)
}

func gatherersAnZsc() (*asset, error) {
	bytes, err := gatherersAnZscBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gatherers/an/zsc", size: 25, mode: os.FileMode(436), modTime: time.Unix(1440549266, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _gatherersCommon = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\x4d\x6f\xdb\x30\x0c\xbd\xfb\x57\x70\x84\x50\xb7\x41\x1d\x2f\x09\x76\x59\xe1\x01\xed\xd0\xdb\xda\x0e\x05\x76\x18\xea\xc0\x70\x2d\xb9\x11\x26\x4b\x9e\x25\xf7\x63\x49\xf6\xdb\x47\x39\xce\x92\xcc\x01\x76\x91\x98\x27\xea\x91\xef\x89\xf1\xd5\xdd\xdd\x97\xeb\xcb\xdb\x04\x1f\x8d\x51\x22\xd7\x18\xdc\x7e\xbb\xb9\xba\xbe\x4f\x50\xb7\xd5\xa3\x68\x30\xb8\xbc\xbf\xbf\xfc\x9e\x60\xde\x34\xf9\x1b\x06\x41\xd9\xea\xc2\x49\xa3\xc1\xb4\xae\x6e\xdd\xe9\x19\x2c\x03\x00\x2b\x1c\x44\x25\x05\xa2\x58\x18\xc0\x65\x8a\x3a\xaf\x44\x8a\x1f\x53\x64\x93\x14\xcf\x21\x45\xf7\x56\xf7\xc0\x74\x03\x3c\xe7\xaa\xf5\x08\x9b\xad\x31\x58\x0f\x98\xb3\xae\x62\xcf\x2f\x4b\x78\x78\x80\x48\x03\x9b\xc2\x7c\x4e\x80\x5b\x08\x4d\xdb\x5e\x65\x80\xcf\x77\x37\x57\x09\x3e\x60\xf7\xa3\x34\x0d\x48\x90\xfe\xc6\x05\x70\xd3\x61\xdb\x14\xe6\x37\x6a\x44\xa6\xb8\x49\xe6\x46\x8b\x1d\x45\x77\x8c\x73\xdc\x43\x96\x7e\x8b\xe3\x14\x53\xa4\xe5\x3c\xc5\x75\x77\xb8\xe9\x14\x48\x23\xd2\xd2\x39\xe5\x83\xee\x3e\x25\x94\xf2\x98\xae\x56\x2b\x61\x6d\x56\xe6\xca\x1e\xca\x63\x33\x52\x28\xe0\x3d\x29\x84\x93\x93\x1e\x79\x97\x00\xfa\x54\x81\x3b\xd8\xfb\x30\xfb\xc7\x87\xc3\x56\xa6\x7e\x99\x1d\xe9\x61\xf3\xaa\x99\x29\x33\x25\xb5\xb0\x7d\x7d\x2e\x9b\x84\x4d\x83\x9d\xd1\xbf\x86\x46\xfb\x1c\xec\x19\xbb\x55\x09\xff\xc6\x09\x9b\x6c\x08\x6c\xc2\x4e\x4b\xa9\x39\xc4\x0b\x53\x89\x78\x14\x33\x02\x21\xaa\x08\x12\xb5\x5b\xc0\x84\xe2\xfc\xf5\x6f\xec\xef\x02\xdb\xb2\xc0\xea\x04\x9e\x1a\x51\x43\xf4\x0c\xf8\x55\x34\x95\xb4\xd6\xb7\xcb\x85\x96\x82\xe3\x99\xaf\x78\xc4\x3e\x2f\x17\xbc\x10\x28\x4c\xab\x1d\x02\xdb\x4c\x2f\xb0\xd3\x97\x02\x22\x05\xbe\x07\x0b\x2b\x70\xb9\x54\x10\x4d\x28\xca\x5f\x7e\x40\xb8\xac\x1b\xa9\x1d\xb0\xc9\x3a\x3c\x3b\xb0\x47\x49\xeb\x32\xdf\x54\xe6\xc7\x75\x6b\x4f\xc1\xe1\xf7\x05\x74\xe2\xc6\x7b\x2a\xa6\x10\xf9\x2c\x28\x7b\x35\xe1\x68\x3c\x0a\x29\x36\x34\x91\x75\x4e\x09\x38\x8a\xc7\x4f\xa2\x8a\x47\x78\x88\x8e\x75\x3d\x04\xb5\xe1\x22\xab\x0c\x6f\x49\x9e\x3f\x5c\xd1\x68\x73\x08\xed\x6a\x3c\x4a\xc7\xab\x55\xe8\x01\xd3\x38\xda\x5a\x2d\x7f\x42\x54\x6c\x81\x48\x0f\x25\x3c\x49\x97\x91\x9d\xe6\x3f\x0a\x3e\xf4\x0a\xf8\x4e\x01\xdd\x0c\x0f\xf8\xa4\xb6\x2e\x57\x4a\xf0\xdd\xac\xbe\x2c\x64\xb1\xf0\x13\xf2\x09\x62\x2e\x9e\x63\xdd\x2a\x75\x71\x7c\x14\x59\xff\x81\x01\xd7\xb4\x62\x38\x8e\xf4\x3c\x99\x78\xa5\x8e\xed\xde\x3f\x01\x22\x4e\x4f\x03\xf3\x21\x25\x95\x3c\x4a\xf8\x27\x00\x00\xff\xff\x2d\xee\xbc\xb3\xc6\x04\x00\x00")

func gatherersCommonBytes() ([]byte, error) {
	return bindataRead(
		_gatherersCommon,
		"gatherers/common",
	)
}

func gatherersCommon() (*asset, error) {
	bytes, err := gatherersCommonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gatherers/common", size: 1222, mode: os.FileMode(436), modTime: time.Unix(1440552216, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"gatherers/ab/dbi": gatherersAbDbi,
	"gatherers/ab/gen": gatherersAbGen,
	"gatherers/ab/hii": gatherersAbHii,
	"gatherers/ab/psi": gatherersAbPsi,
	"gatherers/ab/wbd": gatherersAbWbd,
	"gatherers/an/bac": gatherersAnBac,
	"gatherers/an/crd": gatherersAnCrd,
	"gatherers/an/doi": gatherersAnDoi,
	"gatherers/an/esi": gatherersAnEsi,
	"gatherers/an/fic": gatherersAnFic,
	"gatherers/an/mef": gatherersAnMef,
	"gatherers/an/moi": gatherersAnMoi,
	"gatherers/an/myi": gatherersAnMyi,
	"gatherers/an/nus": gatherersAnNus,
	"gatherers/an/poi": gatherersAnPoi,
	"gatherers/an/sii": gatherersAnSii,
	"gatherers/an/trn": gatherersAnTrn,
	"gatherers/an/vrc": gatherersAnVrc,
	"gatherers/an/zsc": gatherersAnZsc,
	"gatherers/common": gatherersCommon,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"gatherers": &bintree{nil, map[string]*bintree{
		"ab": &bintree{nil, map[string]*bintree{
			"dbi": &bintree{gatherersAbDbi, map[string]*bintree{
			}},
			"gen": &bintree{gatherersAbGen, map[string]*bintree{
			}},
			"hii": &bintree{gatherersAbHii, map[string]*bintree{
			}},
			"psi": &bintree{gatherersAbPsi, map[string]*bintree{
			}},
			"wbd": &bintree{gatherersAbWbd, map[string]*bintree{
			}},
		}},
		"an": &bintree{nil, map[string]*bintree{
			"bac": &bintree{gatherersAnBac, map[string]*bintree{
			}},
			"crd": &bintree{gatherersAnCrd, map[string]*bintree{
			}},
			"doi": &bintree{gatherersAnDoi, map[string]*bintree{
			}},
			"esi": &bintree{gatherersAnEsi, map[string]*bintree{
			}},
			"fic": &bintree{gatherersAnFic, map[string]*bintree{
			}},
			"mef": &bintree{gatherersAnMef, map[string]*bintree{
			}},
			"moi": &bintree{gatherersAnMoi, map[string]*bintree{
			}},
			"myi": &bintree{gatherersAnMyi, map[string]*bintree{
			}},
			"nus": &bintree{gatherersAnNus, map[string]*bintree{
			}},
			"poi": &bintree{gatherersAnPoi, map[string]*bintree{
			}},
			"sii": &bintree{gatherersAnSii, map[string]*bintree{
			}},
			"trn": &bintree{gatherersAnTrn, map[string]*bintree{
			}},
			"vrc": &bintree{gatherersAnVrc, map[string]*bintree{
			}},
			"zsc": &bintree{gatherersAnZsc, map[string]*bintree{
			}},
		}},
		"common": &bintree{gatherersCommon, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

