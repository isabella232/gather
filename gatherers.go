package main

import (
    "bytes"
    "compress/gzip"
    "fmt"
    "io"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

func gatherers_ab_gen() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xb4, 0x54,
		0x6d, 0x6f, 0xe2, 0x46, 0x10, 0xfe, 0xce, 0xaf, 0x18, 0x21, 0x4e, 0xc6,
		0x2a, 0xb1, 0x21, 0x6f, 0x27, 0x25, 0xba, 0xaa, 0x29, 0xe4, 0x1a, 0x74,
		0x69, 0x40, 0xc1, 0x49, 0x3e, 0x84, 0x28, 0xb7, 0xd8, 0x6b, 0x7b, 0x85,
		0xd9, 0xdd, 0xee, 0x8e, 0x73, 0xe1, 0xda, 0xfb, 0xef, 0x1d, 0x1b, 0x0c,
		0x38, 0x0d, 0xfd, 0x76, 0x52, 0x22, 0x76, 0x9e, 0x79, 0xe6, 0x6d, 0x67,
		0x1f, 0xc7, 0xb9, 0x0c, 0x51, 0x28, 0x09, 0xb1, 0xca, 0x65, 0xd4, 0x76,
		0xe1, 0xef, 0x06, 0x40, 0x7f, 0x74, 0x77, 0x13, 0x7c, 0xfa, 0x9a, 0x18,
		0xae, 0xa1, 0xd9, 0xea, 0x35, 0xe1, 0xc0, 0x80, 0x9f, 0xaa, 0x05, 0xf7,
		0xe1, 0xf0, 0x57, 0xf0, 0x23, 0xfe, 0xe2, 0xcb, 0x3c, 0xcb, 0xe0, 0x1f,
		0xf8, 0x16, 0xc2, 0x41, 0xf6, 0xb5, 0x41, 0x31, 0x22, 0x86, 0x47, 0x68,
		0x95, 0x91, 0x70, 0x90, 0x20, 0x74, 0xe1, 0x89, 0x50, 0x4c, 0xb9, 0xa4,
		0x1f, 0x00, 0x95, 0xa3, 0xce, 0x91, 0xb2, 0x1d, 0x36, 0xa1, 0xf5, 0xfb,
		0x68, 0x74, 0x7d, 0x79, 0x71, 0x03, 0x68, 0x72, 0x5e, 0x7a, 0xf9, 0xab,
		0x40, 0x3a, 0xc4, 0xa2, 0xf1, 0xa3, 0xd1, 0x28, 0x3b, 0x01, 0xc7, 0x72,
		0xea, 0x27, 0x34, 0xec, 0xfb, 0xb2, 0x03, 0xdd, 0x0e, 0xb4, 0xac, 0xf8,
		0xce, 0x3b, 0x60, 0x55, 0x38, 0x67, 0x51, 0x64, 0x9e, 0x85, 0x6c, 0xb7,
		0xb4, 0x32, 0x48, 0x1e, 0x51, 0x00, 0xae, 0x7b, 0xee, 0x80, 0xc3, 0x66,
		0xb9, 0xe5, 0x67, 0x10, 0x45, 0xca, 0x3a, 0x55, 0xa2, 0xc1, 0x40, 0x4d,
		0x84, 0x4c, 0x8a, 0x5e, 0x60, 0x38, 0xde, 0x43, 0x0a, 0xa8, 0x25, 0x18,
		0x0c, 0x46, 0x13, 0x18, 0x0c, 0x2f, 0xf7, 0x25, 0xe2, 0x76, 0x1e, 0xe5,
		0x33, 0x8b, 0x5c, 0xef, 0x61, 0x3c, 0x18, 0x81, 0xc8, 0x25, 0xcc, 0x96,
		0x30, 0x51, 0x18, 0x6d, 0x59, 0x5a, 0x59, 0x2b, 0x66, 0x19, 0x2f, 0xe9,
		0xd0, 0x2e, 0x9c, 0xae, 0xb3, 0x19, 0x75, 0xbc, 0xc4, 0x94, 0x56, 0x70,
		0x9f, 0x67, 0x92, 0x1b, 0x36, 0x13, 0x99, 0x40, 0x4a, 0x10, 0x32, 0x49,
		0xe6, 0x4e, 0x8e, 0x15, 0xeb, 0xa5, 0xc6, 0xb2, 0x6b, 0x56, 0x95, 0xaa,
		0x88, 0xb2, 0xb4, 0x4c, 0x03, 0x9f, 0x83, 0x31, 0x58, 0x6e, 0x5e, 0xb8,
		0xb1, 0xdb, 0x1c, 0x31, 0xea, 0x32, 0x64, 0x5b, 0xfb, 0xea, 0xee, 0xfa,
		0x0b, 0x0c, 0xfe, 0x80, 0x80, 0x49, 0x08, 0x95, 0x4c, 0xb6, 0x5c, 0x9b,
		0x5b, 0x2d, 0x42, 0xa1, 0x72, 0x4b, 0x21, 0x46, 0x68, 0xdc, 0x14, 0x19,
		0x07, 0xc7, 0x1f, 0xe1, 0x02, 0x91, 0x85, 0x73, 0x98, 0x20, 0x33, 0xc8,
		0xa3, 0xff, 0x0d, 0xab, 0xe2, 0x3e, 0xb3, 0x90, 0xcf, 0x94, 0x9a, 0x43,
		0xdf, 0x50, 0x28, 0x37, 0x70, 0x4f, 0xcd, 0xd1, 0xe3, 0xdb, 0xe9, 0xaf,
		0x62, 0x94, 0xf6, 0xa6, 0xe0, 0x06, 0x9e, 0x99, 0x1c, 0x39, 0x4d, 0x17,
		0xee, 0x5e, 0xcc, 0x9e, 0xa0, 0x65, 0x1e, 0xa5, 0xcc, 0x4b, 0x72, 0x69,
		0x33, 0x5a, 0x3f, 0x37, 0xbf, 0x25, 0x0b, 0x26, 0x32, 0x2f, 0x54, 0x8b,
		0x77, 0xf6, 0x52, 0xcf, 0x01, 0xed, 0x32, 0xd8, 0xdd, 0xe4, 0x4a, 0x11,
		0xf5, 0x99, 0xef, 0xb3, 0x1c, 0x55, 0x26, 0xe6, 0x3c, 0x9e, 0x79, 0xca,
		0x24, 0x7e, 0x7c, 0xe2, 0xa5, 0xb8, 0xc8, 0xde, 0xeb, 0x64, 0x4d, 0xdc,
		0x24, 0x20, 0x20, 0x55, 0xe6, 0x0c, 0xbe, 0x0c, 0x03, 0xb8, 0xba, 0xbc,
		0x1d, 0xed, 0x7d, 0x1a, 0x15, 0x61, 0x5b, 0x7b, 0x92, 0xa9, 0x6f, 0x99,
		0x32, 0x62, 0x67, 0x8d, 0xb6, 0x82, 0xea, 0xcf, 0xef, 0x4f, 0x8e, 0xcc,
		0xea, 0x4c, 0x09, 0xdc, 0x52, 0x17, 0x5b, 0xac, 0xa2, 0x2d, 0x84, 0xe4,
		0x24, 0xac, 0x18, 0x9f, 0x57, 0xef, 0x63, 0x87, 0x5c, 0x79, 0xd6, 0x2f,
		0x67, 0x37, 0x84, 0xee, 0xf0, 0x59, 0x1b, 0xf5, 0xba, 0xac, 0xd1, 0x0b,
		0x61, 0xad, 0xd0, 0x9a, 0x6e, 0xe3, 0x4c, 0xa9, 0xa8, 0x03, 0x9a, 0xd6,
		0xdc, 0x6e, 0xb2, 0x96, 0x2e, 0xc4, 0xdb, 0xec, 0x34, 0x4b, 0xb8, 0xe9,
		0x96, 0x82, 0x2e, 0x7c, 0xcf, 0x75, 0x39, 0xbf, 0xd1, 0xf3, 0x8f, 0x3d,
		0x2a, 0x43, 0x35, 0x27, 0x8d, 0x7d, 0x02, 0xc3, 0x64, 0xa4, 0x16, 0x5e,
		0x98, 0x2a, 0x11, 0xf2, 0xf6, 0xe3, 0xd4, 0xf1, 0x6e, 0x2e, 0x03, 0xe8,
		0x5f, 0xdf, 0x4e, 0x9d, 0x0e, 0x4c, 0x9d, 0xc9, 0x7d, 0x6f, 0x75, 0x08,
		0x18, 0x5d, 0x2f, 0xc2, 0xb8, 0xbf, 0x32, 0x1f, 0x84, 0x3c, 0x3d, 0x3e,
		0x87, 0xe1, 0xc5, 0xe9, 0x71, 0x0d, 0x78, 0xdd, 0xd8, 0xa3, 0x87, 0xe2,
		0xf8, 0xe4, 0xc2, 0x2f, 0x64, 0x9d, 0xd3, 0xff, 0x9e, 0x46, 0x7e, 0xfe,
		0xa8, 0x86, 0xff, 0x95, 0x73, 0x8b, 0x34, 0x6c, 0x73, 0x3c, 0x9a, 0x04,
		0xf0, 0xc1, 0xfa, 0xaf, 0x8b, 0xcc, 0xe8, 0xd0, 0xd3, 0xa9, 0x86, 0xab,
		0x20, 0x18, 0xfb, 0x3d, 0xaf, 0x3b, 0x35, 0x53, 0x79, 0xa5, 0x2c, 0x9e,
		0x91, 0xbf, 0x38, 0xdf, 0xd1, 0xf6, 0x0e, 0x2e, 0x12, 0x2e, 0x09, 0x19,
		0x4a, 0xe4, 0x46, 0xb2, 0x0c, 0x1e, 0x94, 0x89, 0xb4, 0xe1, 0xd6, 0xc2,
		0xed, 0xb8, 0x5f, 0x48, 0x9d, 0x56, 0x8d, 0x35, 0xf1, 0xd5, 0x2a, 0xb7,
		0xd7, 0xb7, 0x5b, 0xfc, 0x08, 0x89, 0xed, 0xd3, 0x0e, 0x1c, 0x1d, 0xd2,
		0x38, 0x6f, 0xe0, 0x5e, 0x97, 0xe6, 0x3b, 0xec, 0x76, 0xbb, 0xff, 0x75,
		0x91, 0xa3, 0xf7, 0x1e, 0x7e, 0x72, 0x74, 0xd2, 0x81, 0x93, 0xa3, 0x8f,
		0xef, 0x24, 0xa3, 0x1a, 0xa7, 0xae, 0x5b, 0x7e, 0xbe, 0x04, 0x08, 0x59,
		0xf8, 0x13, 0x5e, 0xc2, 0x5d, 0x17, 0x9e, 0x68, 0x1d, 0x8f, 0xe0, 0xac,
		0xbf, 0x19, 0xfe, 0x87, 0xc8, 0x2b, 0xff, 0x60, 0xc2, 0x62, 0x66, 0x04,
		0xd9, 0x6f, 0x27, 0xf9, 0x37, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x05, 0x51,
		0x09, 0xdc, 0x06, 0x00, 0x00,
		},
		"gatherers/ab/gen",
	)
}

func gatherers_ab_hii() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xca, 0xcc,
		0x2b, 0x2e, 0x49, 0xcc, 0xc9, 0x49, 0x4d, 0x51, 0x50, 0xca, 0x28, 0xc8,
		0xcc, 0x4b, 0x37, 0x56, 0x80, 0x8b, 0x28, 0x29, 0x40, 0x44, 0xb8, 0x00,
		0x01, 0x00, 0x00, 0xff, 0xff, 0x16, 0xa6, 0xa6, 0xc9, 0x24, 0x00, 0x00,
		0x00,
		},
		"gatherers/ab/hii",
	)
}

func gatherers_ab_kwf() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x74, 0x50,
		0xc1, 0x4e, 0xc2, 0x40, 0x10, 0xbd, 0xf7, 0x2b, 0x5e, 0x26, 0x8d, 0x6d,
		0xd5, 0x66, 0x23, 0x47, 0x6c, 0x8d, 0x24, 0x7a, 0xf2, 0x80, 0x41, 0x8d,
		0x21, 0x94, 0x43, 0x65, 0xa7, 0x76, 0x63, 0xd9, 0x25, 0xdb, 0x16, 0x62,
		0x90, 0x7f, 0x77, 0xb7, 0xc0, 0xc9, 0x78, 0x9a, 0xc9, 0xbc, 0xf7, 0xe6,
		0xcd, 0x3c, 0xc9, 0xab, 0xa6, 0xb4, 0x8c, 0xb4, 0xc4, 0xd3, 0xe3, 0xfc,
		0x7d, 0x3a, 0x7b, 0x78, 0xc9, 0x63, 0xaa, 0x1a, 0x63, 0x24, 0x81, 0xa4,
		0x34, 0x2d, 0x25, 0xc1, 0xf4, 0xed, 0x35, 0x8f, 0x93, 0xa0, 0xe5, 0x0e,
		0x69, 0x15, 0x54, 0xc6, 0xe2, 0x8b, 0xbf, 0x77, 0xc6, 0x4a, 0x28, 0x0d,
		0x0a, 0xf7, 0x67, 0xe5, 0xe2, 0x7e, 0x79, 0xa0, 0x40, 0x9a, 0x00, 0xd8,
		0xd5, 0xaa, 0x61, 0x58, 0x2e, 0x25, 0x52, 0x0b, 0xd5, 0xf1, 0xfa, 0x16,
		0x03, 0x00, 0xa8, 0x0a, 0x8b, 0x85, 0x93, 0xf9, 0x21, 0x21, 0xcf, 0x51,
		0x88, 0x4b, 0x2c, 0x97, 0x03, 0xd6, 0xd5, 0xac, 0x87, 0x06, 0xd8, 0x94,
		0x5d, 0x9d, 0x53, 0x18, 0xaf, 0x7a, 0xe7, 0x2a, 0x11, 0x8d, 0x23, 0x67,
		0x8e, 0x1b, 0x64, 0x59, 0x76, 0x16, 0x27, 0x74, 0xe2, 0x36, 0x4a, 0xf3,
		0x5f, 0xee, 0x28, 0xfd, 0x9f, 0x1c, 0xee, 0x7d, 0x11, 0x22, 0xa2, 0x48,
		0x44, 0x05, 0x45, 0x87, 0x13, 0xe8, 0x5e, 0xbd, 0xca, 0x63, 0xd0, 0xbe,
		0x20, 0x7f, 0x40, 0x41, 0xe3, 0x82, 0xc2, 0x63, 0x77, 0x5d, 0x90, 0xd7,
		0x1c, 0x47, 0xc7, 0xee, 0x50, 0x68, 0x42, 0x32, 0x48, 0x2b, 0xe5, 0x8a,
		0x34, 0x9a, 0x91, 0x21, 0x8b, 0x3f, 0x2d, 0x6f, 0x9c, 0xf1, 0x29, 0x26,
		0xf2, 0x19, 0x88, 0xda, 0xac, 0x59, 0x60, 0x74, 0x07, 0x21, 0x79, 0x2b,
		0x74, 0xdf, 0x34, 0xf8, 0xb9, 0xc0, 0xc0, 0x4c, 0xb7, 0xa0, 0x67, 0xb6,
		0x6b, 0xd5, 0xb6, 0xca, 0x68, 0x48, 0xd6, 0x8a, 0xa5, 0x0b, 0xde, 0xef,
		0x0b, 0x4c, 0xdf, 0x6d, 0xdc, 0x5f, 0x54, 0x7e, 0xf4, 0xad, 0xda, 0xf2,
		0x39, 0xfb, 0x16, 0x95, 0xe9, 0xb5, 0xdb, 0x1d, 0x4e, 0x66, 0xb3, 0xc9,
		0xdc, 0x5f, 0xee, 0xf2, 0x0f, 0x7e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x54,
		0xaa, 0xf0, 0xe6, 0xd1, 0x01, 0x00, 0x00,
		},
		"gatherers/ab/kwf",
	)
}

func gatherers_ab_psi() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x7c, 0xce,
		0x31, 0x0a, 0xc0, 0x20, 0x0c, 0x85, 0xe1, 0xdd, 0x53, 0xb8, 0xe5, 0x5c,
		0xc1, 0x3a, 0x14, 0xf5, 0x29, 0xc6, 0xfb, 0x53, 0x8b, 0x52, 0x9a, 0x21,
		0xce, 0xff, 0xf7, 0xe0, 0xdd, 0x90, 0xc1, 0x39, 0xc7, 0xcb, 0x13, 0x0a,
		0x37, 0xdf, 0x6a, 0x1f, 0x12, 0x18, 0x88, 0xdd, 0x7f, 0x8d, 0x56, 0x24,
		0xf7, 0xd7, 0x81, 0x87, 0xad, 0x67, 0x54, 0xba, 0xe1, 0x65, 0xa6, 0x5f,
		0x59, 0x2d, 0x12, 0x6a, 0x48, 0x93, 0x59, 0x93, 0xdd, 0xf5, 0x27, 0x96,
		0xc3, 0xa7, 0x19, 0x95, 0x2e, 0x2c, 0xc7, 0x53, 0xbb, 0x93, 0x7b, 0x02,
		0x00, 0x00, 0xff, 0xff, 0x9e, 0xe3, 0xd3, 0xc5, 0x24, 0x01, 0x00, 0x00,
		},
		"gatherers/ab/psi",
	)
}

func gatherers_ab_trn() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x2c, 0xcc,
		0x31, 0x0a, 0xc2, 0x40, 0x10, 0x85, 0xe1, 0x7e, 0x4f, 0xf1, 0x08, 0xc1,
		0x4d, 0x84, 0x28, 0x1e, 0x41, 0xc1, 0x4e, 0x8c, 0x7d, 0x48, 0x21, 0xee,
		0xac, 0x0e, 0x98, 0xd9, 0x30, 0x3b, 0xb1, 0xf2, 0xf0, 0xd9, 0x22, 0xaf,
		0x7a, 0xcd, 0xf7, 0x73, 0xc4, 0x30, 0xa0, 0x13, 0xd4, 0x4d, 0x64, 0x09,
		0x38, 0x96, 0xff, 0x9c, 0x08, 0xd5, 0xfe, 0x60, 0x49, 0x95, 0xc4, 0x2a,
		0xfc, 0x77, 0x78, 0x2b, 0xcd, 0xe8, 0x7e, 0xf0, 0x0f, 0xd2, 0x89, 0x73,
		0xe6, 0x24, 0x08, 0x24, 0x4c, 0xc1, 0xb7, 0x18, 0x47, 0x67, 0x1f, 0x12,
		0x87, 0x6d, 0x69, 0xb1, 0x79, 0x31, 0xf8, 0x2d, 0x80, 0xc8, 0x5f, 0x6a,
		0x72, 0x5b, 0x80, 0xd1, 0xcb, 0x0a, 0x41, 0x7d, 0xe9, 0xfb, 0xdb, 0xf5,
		0x7c, 0xc7, 0xc9, 0x45, 0x76, 0x6b, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe2,
		0x3b, 0xa7, 0xce, 0x84, 0x00, 0x00, 0x00,
		},
		"gatherers/ab/trn",
	)
}

func gatherers_ab_wbd() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x8c, 0x8c,
		0x41, 0x0e, 0xc2, 0x30, 0x0c, 0x04, 0xef, 0xbc, 0xc2, 0xf2, 0x07, 0xfc,
		0x24, 0x44, 0xa8, 0x53, 0x2c, 0x15, 0xb6, 0xb2, 0x1b, 0x25, 0xcf, 0x27,
		0x22, 0xe4, 0x80, 0xc4, 0xa1, 0x97, 0x9d, 0xbd, 0xcc, 0x2c, 0xe6, 0x57,
		0x6d, 0x16, 0x47, 0x10, 0x0b, 0xf6, 0x43, 0x56, 0x60, 0xdd, 0x54, 0xee,
		0x0f, 0xc7, 0x73, 0x82, 0x89, 0xc7, 0xa1, 0xaa, 0x89, 0x92, 0xa3, 0x86,
		0x3a, 0x65, 0x94, 0xd7, 0xc2, 0x97, 0x9f, 0x42, 0x09, 0x97, 0xcd, 0x92,
		0x64, 0x73, 0xcd, 0x68, 0x93, 0x3d, 0xf0, 0x7d, 0xa7, 0x0b, 0xd8, 0xd5,
		0x6f, 0x63, 0xbb, 0xfd, 0xe1, 0x3f, 0xf7, 0x1d, 0x00, 0x00, 0xff, 0xff,
		0x86, 0xed, 0xbd, 0x13, 0xc0, 0x00, 0x00, 0x00,
		},
		"gatherers/ab/wbd",
	)
}

func gatherers_an_bac() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xca, 0x2b,
		0xcd, 0x4d, 0x4a, 0x2d, 0x8a, 0xcf, 0x4f, 0x8b, 0xcf, 0xc9, 0xcc, 0x4b,
		0x2d, 0x56, 0x50, 0xd2, 0x4b, 0x4a, 0x2c, 0xce, 0x28, 0x4a, 0x56, 0xe2,
		0x02, 0x04, 0x00, 0x00, 0xff, 0xff, 0x42, 0xbd, 0x37, 0xd7, 0x1a, 0x00,
		0x00, 0x00,
		},
		"gatherers/an/bac",
	)
}

func gatherers_an_crd() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x44, 0x8e,
		0xc1, 0x4a, 0xc5, 0x30, 0x10, 0x45, 0xd7, 0x9d, 0xaf, 0xb8, 0xc4, 0x2c,
		0x14, 0x09, 0x3c, 0x3f, 0xa0, 0x60, 0x78, 0xae, 0x5f, 0xa1, 0xb4, 0x0b,
		0x09, 0x41, 0x6a, 0x33, 0xad, 0x81, 0x92, 0x94, 0x38, 0x75, 0xe5, 0xc7,
		0xab, 0x11, 0x7d, 0x9b, 0x59, 0x0c, 0xf7, 0x1c, 0xce, 0xb9, 0xef, 0x2e,
		0x2f, 0xdd, 0x38, 0xb4, 0xfa, 0x76, 0x2e, 0x39, 0xc9, 0xf4, 0x0a, 0xb3,
		0xe1, 0x13, 0x6b, 0xe1, 0x1d, 0xe6, 0x03, 0xea, 0x46, 0xdd, 0xd1, 0xb9,
		0x1b, 0x2f, 0x43, 0x7b, 0xa2, 0xc0, 0xf3, 0x36, 0x15, 0x86, 0x99, 0x50,
		0xb9, 0x27, 0x3b, 0x58, 0x5a, 0x72, 0x41, 0x44, 0x4c, 0x50, 0xfa, 0x4f,
		0xa6, 0x28, 0x64, 0x6a, 0xfe, 0x27, 0xae, 0xf2, 0xbe, 0xd5, 0x91, 0x9a,
		0x8d, 0x05, 0xbf, 0xba, 0x7a, 0xef, 0x1f, 0xbe, 0xa7, 0x89, 0x29, 0x2e,
		0x70, 0x0e, 0xba, 0xfe, 0x60, 0x56, 0xc1, 0x09, 0xde, 0x93, 0xbc, 0x71,
		0xa2, 0x26, 0x1f, 0xb2, 0x1f, 0x02, 0xf5, 0xd3, 0x07, 0x4e, 0x52, 0x22,
		0xbf, 0x23, 0xb0, 0xf0, 0x2c, 0x1c, 0x14, 0xb4, 0xed, 0x7b, 0xfb, 0x7c,
		0x0d, 0x72, 0x8f, 0x9e, 0x96, 0x48, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff,
		0x89, 0x93, 0x7c, 0xe1, 0xd9, 0x00, 0x00, 0x00,
		},
		"gatherers/an/crd",
	)
}

func gatherers_an_dbd() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xca, 0xcc,
		0x2b, 0x2e, 0x49, 0xcc, 0xc9, 0x49, 0x4d, 0x51, 0x50, 0x4a, 0x29, 0xca,
		0x2f, 0x48, 0x4a, 0x4d, 0x2c, 0x52, 0x28, 0x2e, 0xce, 0x50, 0x48, 0xce,
		0xc9, 0x4c, 0xcd, 0x2b, 0x51, 0x80, 0x4b, 0x2b, 0x29, 0xc0, 0xa4, 0xb9,
		0x00, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x97, 0x69, 0xa5, 0x33, 0x00,
		0x00, 0x00,
		},
		"gatherers/an/dbd",
	)
}

func gatherers_an_dmp() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x2c, 0x8b,
		0x31, 0x0b, 0xc2, 0x30, 0x10, 0x46, 0xf7, 0xfc, 0x8a, 0x8f, 0x52, 0x4c,
		0x2b, 0x54, 0xf1, 0x27, 0x28, 0xb8, 0x89, 0x75, 0x2f, 0x1d, 0x8a, 0xb9,
		0xe8, 0x81, 0xb9, 0x94, 0xe4, 0xe2, 0xe4, 0x8f, 0x37, 0x43, 0xdf, 0xf4,
		0x86, 0xf7, 0xd8, 0x63, 0x9a, 0x30, 0x08, 0xda, 0xce, 0xb3, 0x38, 0x1c,
		0xab, 0x2f, 0x81, 0xd0, 0xec, 0x0f, 0x1a, 0x53, 0x22, 0xd1, 0x06, 0xbf,
		0x1d, 0x5e, 0x89, 0x56, 0x0c, 0x5f, 0xd8, 0x07, 0xa5, 0xc0, 0x39, 0x73,
		0x14, 0x38, 0x12, 0x26, 0x67, 0x7b, 0xcc, 0xb3, 0xd1, 0x37, 0x89, 0xc1,
		0x46, 0x2c, 0xba, 0x16, 0x85, 0x0d, 0xe4, 0x78, 0x81, 0xe7, 0x0f, 0x75,
		0xb9, 0xaf, 0xb9, 0xd2, 0x53, 0xeb, 0x80, 0xf6, 0x32, 0x8e, 0xb7, 0xeb,
		0xf9, 0x8e, 0x93, 0xf1, 0x6c, 0xfe, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7c,
		0x59, 0x68, 0xbf, 0x82, 0x00, 0x00, 0x00,
		},
		"gatherers/an/dmp",
	)
}

func gatherers_an_dod() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xca, 0xcc,
		0x2b, 0x2e, 0x49, 0xcc, 0xc9, 0x49, 0x4d, 0x51, 0x50, 0x4a, 0xc9, 0x4f,
		0xce, 0x4e, 0x2d, 0x52, 0x80, 0x8b, 0x28, 0x29, 0x40, 0x44, 0xb8, 0x00,
		0x01, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x6e, 0x3b, 0x32, 0x24, 0x00, 0x00,
		0x00,
		},
		"gatherers/an/dod",
	)
}

func gatherers_an_esi() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x4a, 0xc9,
		0x2c, 0x8a, 0x4f, 0xad, 0xc8, 0x2c, 0x2e, 0x29, 0x56, 0x50, 0xd2, 0x2f,
		0x2d, 0x2e, 0xd2, 0x2f, 0xce, 0x48, 0x2c, 0x4a, 0xd5, 0x4f, 0xcd, 0x49,
		0x2c, 0x2e, 0xc9, 0x4c, 0x2e, 0x4e, 0x4d, 0x2c, 0x4a, 0xce, 0x50, 0x52,
		0x50, 0x42, 0xe1, 0x2b, 0xa4, 0xe5, 0x97, 0xe6, 0xa5, 0x28, 0x71, 0x01,
		0x02, 0x00, 0x00, 0xff, 0xff, 0xcd, 0x10, 0xaf, 0x69, 0x3c, 0x00, 0x00,
		0x00,
		},
		"gatherers/an/esi",
	)
}

func gatherers_an_fic() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xca, 0x2f,
		0x2d, 0x29, 0x28, 0x2d, 0x89, 0x2f, 0xcd, 0xcb, 0x49, 0x2d, 0x2e, 0x8e,
		0x4f, 0xcd, 0x2d, 0x28, 0xa9, 0x54, 0x50, 0x4a, 0xcb, 0x2c, 0xce, 0x50,
		0xc8, 0xc9, 0xcc, 0x4b, 0x55, 0x48, 0xce, 0x2f, 0xcd, 0x2b, 0x51, 0x52,
		0x50, 0xf1, 0x0b, 0xf5, 0x75, 0x72, 0x0d, 0x52, 0x50, 0xd1, 0xc8, 0x2b,
		0xcd, 0x4d, 0x4a, 0x2d, 0x8a, 0xcf, 0x4f, 0x8b, 0x07, 0xc9, 0x17, 0x2b,
		0xd4, 0xe9, 0xeb, 0x25, 0xe7, 0xe7, 0xa5, 0x65, 0xa6, 0xeb, 0x83, 0x34,
		0xe9, 0x43, 0xd8, 0x7a, 0x20, 0xb6, 0x26, 0x17, 0x20, 0x00, 0x00, 0xff,
		0xff, 0x55, 0x8c, 0x45, 0x79, 0x5c, 0x00, 0x00, 0x00,
		},
		"gatherers/an/fic",
	)
}

func gatherers_an_moi() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xca, 0xcc,
		0x2b, 0x2e, 0x49, 0xcc, 0xc9, 0x49, 0x4d, 0x51, 0x50, 0xca, 0xcd, 0xcf,
		0x4b, 0xcf, 0x4f, 0x49, 0x52, 0x80, 0x0b, 0x29, 0x29, 0x40, 0x84, 0xb8,
		0x00, 0x01, 0x00, 0x00, 0xff, 0xff, 0x94, 0xde, 0xa3, 0x94, 0x25, 0x00,
		0x00, 0x00,
		},
		"gatherers/an/moi",
	)
}

func gatherers_an_myi() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xca, 0xcc,
		0x2b, 0x2e, 0x49, 0xcc, 0xc9, 0x49, 0x4d, 0x51, 0x50, 0xca, 0xad, 0x2c,
		0x2e, 0xcc, 0x51, 0x80, 0x0b, 0x28, 0x29, 0x80, 0x05, 0xb8, 0x00, 0x01,
		0x00, 0x00, 0xff, 0xff, 0xf3, 0xbc, 0xfd, 0xf3, 0x22, 0x00, 0x00, 0x00,
		},
		"gatherers/an/myi",
	)
}

func gatherers_an_nus() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x34, 0x8d,
		0xcd, 0xca, 0x82, 0x40, 0x14, 0x86, 0xd7, 0x73, 0xae, 0xe2, 0x45, 0x66,
		0xa1, 0x7c, 0x88, 0x5f, 0x17, 0xe0, 0xa6, 0x9f, 0x85, 0x50, 0x06, 0xa6,
		0x2b, 0x91, 0x28, 0x1d, 0x73, 0xc0, 0x66, 0x64, 0x7e, 0x6a, 0xd3, 0xc5,
		0x67, 0x46, 0x9b, 0xb3, 0x38, 0x3c, 0xcf, 0xf3, 0xee, 0xb3, 0x53, 0x79,
		0xde, 0x66, 0x45, 0xca, 0xc3, 0xd1, 0x22, 0x19, 0xf4, 0x5d, 0xe0, 0x85,
		0x9b, 0x11, 0x13, 0xe2, 0x07, 0xfc, 0xd5, 0x2b, 0xe7, 0x23, 0xa2, 0xcd,
		0xb1, 0xca, 0xcb, 0xf4, 0x9f, 0x7a, 0x6d, 0xd0, 0x49, 0x03, 0xa9, 0xc0,
		0x7f, 0x2a, 0x75, 0x9a, 0x98, 0xec, 0x51, 0xd7, 0x88, 0xe7, 0x77, 0xb8,
		0xc8, 0xfc, 0x43, 0x25, 0xc2, 0xb5, 0xc9, 0x74, 0xb1, 0xf6, 0xd9, 0x45,
		0x68, 0x1a, 0x62, 0x6e, 0x10, 0x8a, 0x18, 0x1b, 0x85, 0xc3, 0xb7, 0xb8,
		0xdc, 0xbf, 0x15, 0xb1, 0x5e, 0xce, 0x19, 0x25, 0x48, 0x7b, 0x37, 0x79,
		0x87, 0xc0, 0x5b, 0x61, 0xd0, 0xea, 0x79, 0x3e, 0x00, 0xcf, 0xab, 0xc3,
		0x7a, 0x57, 0x80, 0x2f, 0x34, 0xd1, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x4f,
		0x32, 0x91, 0xff, 0xb4, 0x00, 0x00, 0x00,
		},
		"gatherers/an/nus",
	)
}

func gatherers_an_poi() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xca, 0xcc,
		0x2b, 0x2e, 0x49, 0xcc, 0xc9, 0x49, 0x4d, 0x51, 0x50, 0x2a, 0xc8, 0x2f,
		0x2e, 0x49, 0x2f, 0x4a, 0x2d, 0x2e, 0xcc, 0x51, 0x80, 0x8b, 0x2a, 0x29,
		0x14, 0x00, 0xf9, 0x5c, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x22, 0xbd,
		0xc0, 0xb3, 0x26, 0x00, 0x00, 0x00,
		},
		"gatherers/an/poi",
	)
}

func gatherers_an_sii() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xca, 0xcc,
		0x2b, 0x2e, 0x49, 0xcc, 0xc9, 0x49, 0x4d, 0x51, 0x50, 0x2a, 0x2e, 0xcc,
		0xc9, 0x2c, 0x49, 0x55, 0x80, 0x8b, 0x28, 0x29, 0x40, 0x44, 0xb8, 0x00,
		0x01, 0x00, 0x00, 0xff, 0xff, 0xf6, 0xf9, 0x50, 0x9f, 0x24, 0x00, 0x00,
		0x00,
		},
		"gatherers/an/sii",
	)
}

func gatherers_an_vrc() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xca, 0x2b,
		0xcd, 0x4d, 0x4a, 0x2d, 0x8a, 0xcf, 0x4f, 0x8b, 0xcf, 0xc9, 0xcc, 0x4b,
		0x2d, 0x56, 0x50, 0xd2, 0x2b, 0xcb, 0xcc, 0x2d, 0x4a, 0x56, 0xe2, 0x02,
		0x04, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x67, 0x80, 0x6b, 0x19, 0x00, 0x00,
		0x00,
		},
		"gatherers/an/vrc",
	)
}

func gatherers_an_zsc() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xca, 0x2b,
		0xcd, 0x4d, 0x4a, 0x2d, 0x8a, 0xcf, 0x4f, 0x8b, 0xcf, 0xc9, 0xcc, 0x4b,
		0x2d, 0x56, 0x50, 0xd2, 0xab, 0x2a, 0xce, 0x28, 0x4a, 0x56, 0xe2, 0x02,
		0x04, 0x00, 0x00, 0xff, 0xff, 0x65, 0xa3, 0x8d, 0xc6, 0x19, 0x00, 0x00,
		0x00,
		},
		"gatherers/an/zsc",
	)
}

func gatherers_common() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x84, 0x54,
		0xcb, 0x6e, 0xdb, 0x3a, 0x10, 0xdd, 0xeb, 0x2b, 0x4e, 0x08, 0x22, 0x7e,
		0xe0, 0xca, 0xbe, 0x76, 0x70, 0x37, 0x09, 0x74, 0x51, 0x07, 0x08, 0xba,
		0x69, 0x1e, 0x30, 0x92, 0x45, 0x61, 0xbb, 0x82, 0x22, 0x51, 0x31, 0x51,
		0x8a, 0x54, 0x45, 0x2a, 0x8f, 0xca, 0xce, 0xb7, 0x97, 0x94, 0x64, 0x39,
		0x86, 0x03, 0xd4, 0x0b, 0x92, 0x3a, 0x9c, 0x39, 0x33, 0x67, 0x66, 0xe8,
		0xcb, 0xdb, 0xdb, 0x6f, 0x57, 0xb3, 0x9b, 0x80, 0x3c, 0x2a, 0x25, 0x58,
		0x24, 0x89, 0x77, 0xf3, 0x70, 0x7d, 0x79, 0x35, 0x0f, 0x88, 0x2c, 0xb3,
		0x47, 0x56, 0x10, 0x6f, 0x36, 0x9f, 0xcf, 0xbe, 0x07, 0x24, 0x2a, 0x8a,
		0xe8, 0x8d, 0x78, 0x9e, 0x97, 0x96, 0x32, 0x36, 0x5c, 0x49, 0xa8, 0xd2,
		0xe4, 0xa5, 0xe9, 0x0f, 0x50, 0x79, 0x80, 0x66, 0x06, 0x7e, 0x6a, 0x0f,
		0x3c, 0xc5, 0x62, 0x01, 0x3a, 0x45, 0x10, 0x80, 0xd6, 0xbe, 0x58, 0xad,
		0x2c, 0x6e, 0xd6, 0x4c, 0xda, 0x0d, 0xb8, 0x7d, 0xb8, 0x0f, 0xc8, 0xc2,
		0x32, 0xb9, 0x8f, 0xd9, 0xfc, 0x6b, 0xd8, 0x04, 0xe8, 0x83, 0xd0, 0xea,
		0xe4, 0x6c, 0x4b, 0x30, 0xa8, 0x6f, 0x52, 0x55, 0x80, 0x83, 0x4b, 0xd0,
		0xaa, 0x33, 0x5a, 0x7c, 0x59, 0x6d, 0xeb, 0xcb, 0x44, 0xd5, 0x1b, 0x70,
		0x7f, 0x7d, 0x17, 0x50, 0xde, 0x7e, 0xb4, 0xa1, 0x2d, 0x86, 0xe0, 0x1d,
		0x3f, 0x96, 0x55, 0x13, 0xd9, 0xfd, 0xba, 0xe8, 0x5d, 0x06, 0xd4, 0xae,
		0xce, 0xf4, 0x1f, 0xd2, 0xe2, 0x4c, 0x68, 0x76, 0x6c, 0xb2, 0x24, 0xce,
		0x68, 0x49, 0x3a, 0xb3, 0x94, 0xb7, 0x19, 0x48, 0xe6, 0xed, 0xf5, 0xd0,
		0xca, 0x6e, 0xe7, 0xe7, 0xfe, 0x64, 0xbb, 0x72, 0x86, 0x1d, 0x57, 0x73,
		0x79, 0xe6, 0xb0, 0xda, 0x91, 0xc5, 0x6b, 0x05, 0x52, 0x2d, 0x89, 0x8c,
		0x32, 0xb6, 0x24, 0xe7, 0x96, 0x7e, 0x62, 0xc9, 0xb1, 0x24, 0xe6, 0x2d,
		0x6f, 0x81, 0x69, 0x03, 0x3c, 0x47, 0xa2, 0x74, 0x88, 0xcb, 0x62, 0x4b,
		0xbc, 0xed, 0x51, 0xe5, 0xc3, 0x52, 0x0a, 0xa6, 0x75, 0x98, 0x46, 0x42,
		0xbf, 0xb5, 0x6d, 0x68, 0x4b, 0x70, 0x06, 0x5f, 0x32, 0xfc, 0x6b, 0xf5,
		0xe3, 0xf4, 0xb4, 0x45, 0x4e, 0x02, 0x10, 0x67, 0xca, 0xc8, 0x1e, 0xf6,
		0xa5, 0xbb, 0x39, 0xec, 0x4f, 0x43, 0x6e, 0xbb, 0x31, 0x21, 0x76, 0x99,
		0xba, 0x65, 0x97, 0xff, 0xc7, 0x1c, 0x9a, 0xf1, 0x08, 0x55, 0x1a, 0x0a,
		0x2e, 0x99, 0x6e, 0xe3, 0x27, 0xbc, 0x08, 0xe8, 0xd4, 0xeb, 0x32, 0xf1,
		0x7f, 0xbb, 0x51, 0x38, 0x0c, 0x40, 0x9d, 0x11, 0x69, 0x29, 0xeb, 0x55,
		0x30, 0x57, 0x8e, 0x80, 0x4e, 0x1a, 0x06, 0x1d, 0xd0, 0x7e, 0xca, 0x65,
		0x82, 0xf1, 0x5a, 0x65, 0x6c, 0x3c, 0x1c, 0x3b, 0x0f, 0xf8, 0x99, 0x85,
		0x58, 0x6e, 0xd6, 0x98, 0xd8, 0x73, 0xf4, 0xda, 0x9d, 0x9d, 0x2f, 0xe8,
		0x8e, 0x05, 0x9b, 0x53, 0x3c, 0x15, 0x2c, 0x87, 0xff, 0x0c, 0x72, 0xc7,
		0x8a, 0x8c, 0x6b, 0xed, 0xf2, 0x4d, 0x98, 0xe4, 0x2c, 0x21, 0x03, 0x17,
		0xf1, 0x93, 0xfa, 0x39, 0xbd, 0x70, 0x4a, 0x10, 0xab, 0x52, 0x1a, 0x02,
		0xda, 0xbc, 0x03, 0xd0, 0xfe, 0x4b, 0x0c, 0x5f, 0xd4, 0x59, 0x6b, 0x6c,
		0x60, 0x22, 0x2e, 0xe0, 0x4f, 0xec, 0x29, 0x7a, 0xf9, 0x89, 0x5e, 0x95,
		0x17, 0x5c, 0x1a, 0xd0, 0xc9, 0xb6, 0x37, 0x38, 0xa8, 0x8f, 0xe0, 0xda,
		0x84, 0x2e, 0xa9, 0xd0, 0x75, 0x76, 0x57, 0x9f, 0x38, 0xc1, 0xfb, 0x05,
		0x6a, 0x71, 0xa3, 0x0f, 0x2a, 0xa6, 0xf0, 0x9d, 0x15, 0xd2, 0x56, 0x4d,
		0x6f, 0x38, 0x1a, 0xf6, 0xec, 0x59, 0xd9, 0x47, 0x95, 0x47, 0xd6, 0x80,
		0x0c, 0xc7, 0xa3, 0x27, 0x96, 0x8d, 0x87, 0xe4, 0x10, 0x1d, 0xc9, 0xfc,
		0x18, 0x94, 0x2a, 0x61, 0x61, 0xa6, 0x92, 0xd2, 0xca, 0x73, 0x97, 0x1b,
		0xfb, 0x3a, 0x13, 0xf4, 0xf4, 0x66, 0x34, 0x5c, 0x8e, 0x36, 0x9b, 0x9e,
		0x03, 0x54, 0x61, 0xec, 0x56, 0x4a, 0xfe, 0x0b, 0x7e, 0xbc, 0x03, 0x7c,
		0x79, 0x2c, 0xe1, 0x89, 0x9b, 0xd0, 0x96, 0x53, 0xfd, 0x45, 0xc1, 0x7f,
		0xad, 0x82, 0x64, 0xaf, 0xc0, 0x7a, 0xf6, 0x0e, 0xf8, 0xb8, 0xd4, 0x26,
		0x12, 0x82, 0x25, 0xfb, 0x61, 0x7d, 0x59, 0xf3, 0x78, 0xed, 0x46, 0xe4,
		0x7f, 0x8c, 0x13, 0xf6, 0x3c, 0x96, 0xa5, 0x10, 0x17, 0x9f, 0xcf, 0x22,
		0x6d, 0xff, 0xaa, 0x60, 0x8a, 0x92, 0x1d, 0xcf, 0xa3, 0x6d, 0x4f, 0xc8,
		0x5e, 0x6d, 0xc6, 0xfa, 0xc3, 0x53, 0x80, 0x9f, 0xd8, 0xd6, 0x60, 0x75,
		0x4c, 0x69, 0x43, 0x7e, 0x4a, 0xf8, 0x27, 0x00, 0x00, 0xff, 0xff, 0xbc,
		0xb5, 0x90, 0x99, 0x10, 0x05, 0x00, 0x00,
		},
		"gatherers/common",
	)
}


// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	if f, ok := _bindata[name]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string] func() ([]byte, error) {
	"gatherers/ab/gen": gatherers_ab_gen,
	"gatherers/ab/hii": gatherers_ab_hii,
	"gatherers/ab/kwf": gatherers_ab_kwf,
	"gatherers/ab/psi": gatherers_ab_psi,
	"gatherers/ab/trn": gatherers_ab_trn,
	"gatherers/ab/wbd": gatherers_ab_wbd,
	"gatherers/an/bac": gatherers_an_bac,
	"gatherers/an/crd": gatherers_an_crd,
	"gatherers/an/dbd": gatherers_an_dbd,
	"gatherers/an/dmp": gatherers_an_dmp,
	"gatherers/an/dod": gatherers_an_dod,
	"gatherers/an/esi": gatherers_an_esi,
	"gatherers/an/fic": gatherers_an_fic,
	"gatherers/an/moi": gatherers_an_moi,
	"gatherers/an/myi": gatherers_an_myi,
	"gatherers/an/nus": gatherers_an_nus,
	"gatherers/an/poi": gatherers_an_poi,
	"gatherers/an/sii": gatherers_an_sii,
	"gatherers/an/vrc": gatherers_an_vrc,
	"gatherers/an/zsc": gatherers_an_zsc,
	"gatherers/common": gatherers_common,

}
